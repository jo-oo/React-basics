import './App.css';
import { useState } from 'react'; //importerar useState-hooken*/funktionen fr친n react biblioteket
import Salary from './components/Salary'
/*//s칛tter initiala v칛rdet av clicks till 100
const initialClickState = () => {
  return 100    
}
*/



//detta kallas en Template
const App = () => {

  //STATES
  //f칬r att saker som vi g칬r h칛r ska SKRIVAS ut i webbl칛saren s친 m친ste vi anv칛nda STATES
  //Ordningen p친 States spelar roll. De g친r i ovanf칬r-under-ordning.
    //laddar du om sin sidan g칬r det ingen om du bytt ordning men annars blir det kansigt
  const [message, setMessage] = useState('Message is first this' ) //message: 1a parameter=vad vi vill att v친r varibael  ska ha f칬r URSPRUNGLIGT V츿RDE
                                                            //setMessage: 2a parmeter 칛r en funktion vi kallar p친 f칬r att kunna uppdatera variabeln
                                                            //returnerar en array med 2 element i sig.
  const [clicks, setClicks] = useState(0) //s칛tter initiala v칛rdet av clicks till 0 i b칬rjan och anger useState f칬r att ange att det ska kunna uppdateras
                                                          //vi kan ocks친 s칛tte in en funktion h칛r. =useState(initialClickState) Om vi inte kallar p친 den, vilket blir knasigt s친 kommer den bara k칬ras en g친ng. D친 s칛tter vi att det rusprunlgiga statet ska vara hela den h칛r funktionen och inte v칛rdet den returnerar 
                                                          //s친 det blir 100, och sen 102 och sen 104 osv. (vi kommer inte anv칬nda detta p친 kursen nu)
	const [posts, setPosts] = useState([
		{ title: "React Rocks 游뱆游낕!", likes: 1337 },
		{ title: "JSX Rocks Even Moar 游뱆游낕!", likes: 42 },
		{ title: "Got State?", likes: 3 },
	]) 
  //dessa 3 칛r initiala v칛rdet av posts

  //input state
  const [newPostTitle, setNewPostTitle] = useState('')

  const [showPostSection, setShowPostSection] =  useState(true) //Post Section Show is defualt true

  const handleButtonClick = () => {
    console.log("clicks before change:", clicks);
  
    setClicks( prevClicks => prevClicks + 1)  //prevClicks = 0 return 1
                                              //setClicks tar in f칬reg친ende Clicks, allts친 v칛rdet av vad clicks var innan. 
                                              //n칛r vi tar det f칬reg친ende v칛rdet + 1 s친 kommer react v칛nta tills detta v칛rdet 칛r uppdaterat(allts친 inladdat) innan den k칛r n칛sta setClicks-rad 34

    console.log("clicks after the change:", clicks);

    setClicks( prevClicks => prevClicks + 1) //prevclicks = 1 return 2
    console.log("clicks after the second change:", clicks);

    //g칬칛r man m친nga state-uppdateringar efter varandra s친 칛r det s칛krast att anv칛nda en funktion som tar emot den tidigare staten o f칬r칛ndrar den p친 n친t s칛tt.
    //ska du bara skriva 칬ver den beh칬ver du inte anv칛nda en funktion d친 bara skriver du 칬ver den
	          	
              //setClicks(clicks + 1);
              // console.log("You clicked the button mom!") 
                //console.log("Message is:", message) //first value of message
                //setMessage("This is my changed message after onclick on green button:") 
                //{/*v칛rdet p친 message kommer 칛ndras h칛r OCH SKRIVS UT i WEBBsidan */} 
  }




  //UPPDATERA POSTS-Funktion
  //ta emot vilken post vi vill uppdatera med mer likes
  const handleLikesClick = (post) => {
      post.likes++
      setPosts([ ...posts ] ) //skapar en ny array h칛r. sprider ut min nuvarande array, som att vi tar varje objekt i posts och skriver ut dom i arrayen
                                //setPosts( [ {}, {}, {} ] ) //typ samma princip h칛r. allts친 h칛r s칛tter vi till 3 tomma objekt
                                //den nya arrayen best친r av samma objekt som den gamla arrayen
  }

  //DELETe POSTs-funktion
  //ska inneh친lla alla posts F칐RUTOM den vi klickade p친.=
  //Filtrera bort den post vi klickade p친 
  //anv칛nder FILTEr. itererar 칬ver posts och g칬r en j칛mf칬relese f칬r varje sak(post) i listan posts
  //allt vi returnerar TRUE p친 kommer FINNAS med i DEN NYA LISTAN

  const handleDeletePostClicks = (clickedPost) => {
      const listWIthDeletedPost = posts.filter(post => post !== clickedPost)
        setPosts( [ ...listWIthDeletedPost ] )
      //notera att johan gjorde en 칛nnu kortare variant av denna p친 en rad, utan setPosts p친 raf 87 men de funkar samma.
  }

  const handleFormSubmit = e => {
      //stop form from submitting
      e.preventDefault()

      //push a new post to the posts state
      const newPost = { title: newPostTitle, likes: 0 }
      setPosts([...posts, newPost])  //s칛tter posts till en ny array som ska vara de gamla posten & de nya posten
      
      //clear newPostTitle state
      setNewPostTitle('')

  /*const handleDeletePostClicks = (clickedPost) => {
      const listWIthDeletedPost = posts.filter(post => {
          return post !== clickedPost

          /* = samma som denna if-sats:
          if (post !== clickedPost) {
              return true
          } else { 
            return false
          }
          */ 
  }  



  //Add onclicks to the salary-button = onClick={ () => handleSalaryClick(1) }
  return ( 
    <div className="App container">
      <h1>React Basics</h1>

      <h2>{ message }</h2>

      <p>You have clicked the button { clicks } times</p>

      <button onClick={handleButtonClick} className="btn btn-success btn-lg">click me!</button>

			<button onClick={ () => { setMessage('Hi dad!') } } className="btn btn-warning btn-lg">Hi dad!</button>

			<hr />

      { /*all logisk som har med Salarykomponenten att g칬raz ligger nu inom denna salary. H칛r ska du reendera Salary-knappen */ }
      <Salary />

      
      <hr />



      {/* Dynamisk Knapp= if showSalarySection 칛r true s친 rendera ut detta*/}
          <button className="btn btn-primary" onClick={()=> setShowPostSection(!showPostSection)}>
      { showPostSection && "HIDE POSTS" }
      { !showPostSection && "SHOW POSTS" }
      </button>

      { showPostSection && (
          <div>
            <h2>Posts</h2>

            <form onSubmit = {handleFormSubmit} >
              <div className="input-group">
                  <input
                      type="text"
                      class="form-control"
                      placeholder="Post tile"
                      onChange={(e) => {
                        setNewPostTitle(e.target.value) ///onCHange= uppdaterar newPostTitle state. //update state when input changes
                      }}
                      value={ newPostTitle } //s칛tter sen v칛rdet tilln newPostTitle//update input when state changes
                      //2-v칛gs data-binding= detta. Du kan uppdatera Components i Isnpektorn geno att skriva i inputf칛ltet men du kan coks친 skriva i components och s친 uppdateras inputf칛ltet.
                  />
                  <button
                      type="submit"
                      class="btn btn-primary"
                  >
                    Create
                  </button>
              </div>
            </form>

            <ul> 
              {
                posts.map( (post, index) => //UPDATE POSTS WITH LIKES ON EACH ONE + DELETE POSTS
                  (
                    <li key={index}> 
                      {post.title} ({post.likes})
                      <button 
                          className="btn btn-success btn-sm" 
                          onClick={() => handleLikesClick(post)} //add villken post du vill uppdatera med likes
                          
                        >Click here to update posts</button>

                        <button
                          className="btn btn-danger btn-sm" 
                          onClick={() => handleDeletePostClicks(post)}
                        
                        >Delete Post</button>

                    </li> //n칛r dessa iterieras s친 skrivs en Post ut per g친ng/loop! 
                  ) 
                )
              }
            </ul>
        </div>
        )}

    </div>//l칛ser in funktionen handleButtonClick f칬r Click-Event. 
    //Vi kan dock inte kalla p친 den h칛칬r som i exemepl:button onClick={ handleButtonClick () } pga d친 l칛ses den in s친 fort appen k칬rs

  )
}

export default App;

  //Exempel: v칛rdet i messager kan vi 칛ndra och det 칛ndras men det 칛ndras inte n칛r det skrivs ut i webbl칛saren
  /*

  let messgae= "Hello"

  const handleButtonClick = () => {
		console.log("You clicked the button!")
		console.log("Message is:", message)   //value is Hello, prints Hello
		message = "Bye mom"
		console.log("Message after change is:", message) //value is Bye mom, prints Hello
    //v칛rdet p친 message kommer 칛ndras h칛r men INTE SKRIVA UT i WEBBsidan
  } 
  */


  //Add likes to ALL Posts
  //using function inside here (not preferred coz its a bit long)
  //you should add a function for handle PostsLikesClicks up in the code instead
  /*
  <ul> 
  {
    posts.map( (post, index) =>
      (
        <li key={index}> 
          {post.title} ({post.likes})
          <button 
            className="btn btn-success btn-sm" 
            onClick={() => {
              post.likes++
              //update posts genom att skapa ny array d칛r nya v칛rden skrivs ut i
              setPosts( [...posts] )

            }}
            >Click here to update posts</button>
        </li> //n칛r dessa iterieras s친 skrivs en Post ut per g친ng/loop! 
      )
    )
  }
</ul>
*/
